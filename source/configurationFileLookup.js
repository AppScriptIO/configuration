"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.configurationFileLookup = configurationFileLookup;exports.findTargetProjectRoot = findTargetProjectRoot;
var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _ConfigurationClass = require("./Configuration.class.js");








function configurationFileLookup({
  configurationPath = 'configuration',
  currentDirectory,
  configurationBasePath = [],
  possibleConfigurationPath = [] } =
{}) {





  if (!Array.isArray(configurationBasePath)) configurationBasePath = [configurationBasePath];


  let configurationAbsoluteBasePath = configurationBasePath.map(basePath => {
    if (_path.default.isAbsolute(basePath)) return basePath;else
    return _path.default.join(currentDirectory, basePath);
  });


  configurationAbsoluteBasePath.push(currentDirectory);




  if (_path.default.isAbsolute(configurationPath))

    possibleConfigurationPath.push(configurationPath);else
  {

    configurationAbsoluteBasePath = configurationAbsoluteBasePath.reduce((accumulator, basePath) => {

      return accumulator.concat(traversePath({ initialPath: basePath }));
    }, []);
    let additionalPossibleConfigPath = configurationAbsoluteBasePath.map(basePath => _path.default.join(basePath, configurationPath));
    possibleConfigurationPath = possibleConfigurationPath.concat(additionalPossibleConfigPath);
  }


  possibleConfigurationPath = [...new Set(possibleConfigurationPath)];


  let errorAccumulator = [],
  index = 0,
  configurationAbsolutePath;
  while (index < possibleConfigurationPath.length) {
    let configurationPath = possibleConfigurationPath[index];
    try {
      require.resolve(configurationPath);
      configurationAbsolutePath = configurationPath;
      break;
    } catch (error) {

      errorAccumulator.push(error);
    }
    index++;
  }

  if (!configurationAbsolutePath) {
    console.log(
    `%c45455455`,
    'color: #F99157;',
    'X `configuration` parameter (relative configuration path from PWD) in command line argument must be set, because the configuration algorithm failed to look it up.');

    console.log(errorAccumulator);
    throw new Error('• Lookup algorithm for target project configuration path failed.');
  }


  process.argv = process.argv.filter(value => value !== `configuration=${configurationPath}`);

  return {
    configuration: loadConfiguration(configurationAbsolutePath),
    path: configurationAbsolutePath };

}

function loadConfiguration(configPath) {
  let configurationObject = require(configPath);
  if (Object.entries(configurationObject).length === 0 && configurationObject.constructor === Object)
  throw new Error(`• Configuration "${configPath}" cannot be empty, or module didn't load completely because of circular dependencies."`);

  return new _ConfigurationClass.Configuration({ configuration: configurationObject });
}




function traversePath({ initialPath, stopPath = ['node_modules'] }) {
  let pathAccumulator = [];
  let isRootDirectory = false,
  currentPath = initialPath;
  while (!isRootDirectory) {
    if (stopPath.includes(_path.default.basename(currentPath)))

      break;
    pathAccumulator.push(currentPath);
    currentPath = _path.default.dirname(currentPath);
    isRootDirectory = currentPath == _path.default.dirname(currentPath);
  }
  return pathAccumulator;
}



function findTargetProjectRoot({ nestedProjectPath } = {}) {
  let targetProjectConfig;
  for (let lookupPath of nestedProjectPath) {
    try {
      ;({ configuration: targetProjectConfig } = configurationFileLookup({ currentDirectory: lookupPath }));
      break;
    } catch (error) {
      throw error;
    }
  }
  (0, _assert.default)(targetProjectConfig, `• target project configuration file was not found from possible lookup paths.`);
  return targetProjectConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,